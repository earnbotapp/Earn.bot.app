// FILE: server.js

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');

const app = express();
app.use(cors());
app.use(bodyParser.json());

// === CONFIG ===
// ⚠️ Tokens/Secrets को env variables में रखें (Render Dashboard > Environment Variables)
const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// === MongoDB Setup ===
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('✅ MongoDB connected'))
  .catch(err => console.error(err));

const userSchema = new mongoose.Schema({
  userId: { type: String, required: true, unique: true },
  coins: { type: Number, default: 0 },
  referredBy: { type: String, default: null }
});

const User = mongoose.model('User', userSchema);

// === Helper ===
async function getUser(userId) {
  let user = await User.findOne({ userId });
  if (!user) {
    user = new User({ userId, coins: 0 });
    await user.save();
  }
  return user;
}

// === Bot Start Command ===
bot.onText(/\/start(.*)/, async (msg, match) => {
  const chatId = msg.chat.id.toString();
  const ref = match[1]?.trim();

  let user = await User.findOne({ userId: chatId });
  if (!user) {
    user = new User({ userId: chatId, coins: 0, referredBy: ref || null });
    await user.save();

    if (ref && ref !== chatId) {
      let refUser = await User.findOne({ userId: ref });
      if (refUser) {
        refUser.coins += 50; // referral bonus
        await refUser.save();
        bot.sendMessage(ref, `🎉 You earned 50 coins! Your friend joined.`);
      }
    }
  }

  bot.sendMessage(chatId, `Welcome! You have ${user.coins} coins.`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "🎁 Daily Reward", callback_data: "daily" }],
        [{ text: "▶️ Watch Ad", callback_data: "ad" }],
        [{ text: "🎲 Spin Game", callback_data: "spin" }],
        [{ text: "👥 Invite Friends", callback_data: "ref" }],
        [{ text: "💰 My Balance", callback_data: "balance" }]
      ]
    }
  });
});

// === Callback Queries ===
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id.toString();
  const data = query.data;

  let user = await getUser(chatId);

  switch (data) {
    case "daily":
      user.coins += 10;
      await user.save();
      bot.sendMessage(chatId, `✅ You got 10 daily coins! Balance: ${user.coins}`);
      break;
    case "ad":
      user.coins += 5;
      await user.save();
      bot.sendMessage(chatId, `📺 Thanks for watching ad! +5 coins. Balance: ${user.coins}`);
      break;
    case "spin":
      const win = Math.floor(Math.random() * 20);
      user.coins += win;
      await user.save();
      bot.sendMessage(chatId, `🎲 You spun and won ${win} coins! Balance: ${user.coins}`);
      break;
    case "ref":
      bot.sendMessage(chatId, `👥 Invite friends using this link: https://t.me/YourBotUsername?start=${chatId}`);
      break;
    case "balance":
      bot.sendMessage(chatId, `💰 Your balance: ${user.coins} coins.`);
      break;
  }
  bot.answerCallbackQuery(query.id);
});

// === API for frontend (optional) ===
app.get('/users', async (req, res) => {
  const allUsers = await User.find();
  res.json(allUsers);
});

// === Server Start ===
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
